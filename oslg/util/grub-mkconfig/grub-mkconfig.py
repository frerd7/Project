#
#  OSLG  -- Operating System Loader in GRUB 
#  Copyright (C) 2022 Free Software Foundation, Inc.
#
#  OSLG is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  OSLG is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OSLG.  If not, see <http://www.gnu.org/licenses/>.
#

import sys
import platform
import shutil
import argparse

from theme_config import *
from os_prober import *
from vmlinuz import *
from traslate import *

#env
oslg_default = "0" 
oslg_gfxmode = "auto"
oslg_timeout = "5"
oslg_cmdline = "quiet splash"
oslg_disable_linux_recovery = True
oslg_gfxmode = "auto"
oslg_theme = "save"

class CONF:
	def __init__(self, out, default, gfxmode, root, theme, timeout, recovery, cmdline, theme_dir):
		# check command 
		if shutil.which("x86_64-oslg-probe") is not None:
			probe = "x86_64-oslg-probe"
		elif shutil.which("i386-oslg-probe") is not None:
			probe = "i386-oslg-probe"
		else:
			raise Exception(f"{tr('The *{platform}-oslg-probe command was not found on the system.')}")

		print(f"{tr('Generating configuration file')} oslg.cfg ...")
		header = ["#"
		         ,"# DO NOT EDIT THIS FILE"
		         ,"#"
		         ,f"# It is automatically generated by Python {str(sys.version_info.major)}.{str(sys.version_info.minor)}" 
                 ,"# oslg-mkconfig"
                 ,"#"]
                       
		section = ["\nif [ -s $root/boot/oslg/oslgenv ]; then"
				  ,"    load_env"
				  ,"fi"
				  ,f"set default={int(default)}"
				  ,f"set gfxmode={gfxmode}"
				  ,f"set timeout={int(timeout)}\n"
				  ,"if [ ${prev_saved_entry} ]; then"
				  ,"  set saved_entry=${prev_saved_entry}"
				  ,"  save_env saved_entry"
				  ,"  set prev_saved_entry="
				  ,"  save_env prev_saved_entry"
				  ,"  set boot_once=true"
				  ,"fi"
				  ,"\nfunction savedefault {"
				  ," if [ -z ${boot_once} ]; then"
				  ,"   saved_entry=${chosen}"
				  ,"   save_env saved_entry"
				  ," fi\n}"]
		
		ro = f"{root}/boot"
		if ro.startswith("//"):
			ro = ro.replace("//", "/", 1)

       # <---------- header setion in file ---------->       
		file = open(f"{out}", "w+")
		for line in header:
			file.write(f"{line}\n")
		for line in section:
			file.write(f"{line}\n")
		# <---------- found device make --------------->	
		if os.path.exists(f"{theme_dir}") == True:
			Theme(file, f"{theme_dir}", theme, probe)
		VMLinux(f"{ro}", cmdline, file, recovery, probe)
		OSPROBER(file, probe, f"{ro}/oslg")

def options(parser):
	parser.add_argument("-o", "--output", "--output="
					 , nargs='?', action='store'
					 , help=f"{tr('Output of the selected file.')}")
	parser.add_argument("-r","--root", "--root="
					 , nargs='?', action='store'
					 , help=f"{tr('Boot directory.')}")
	
	parser.add_argument("--default", "--default="
					 , nargs='?', action='store'
					 , help=f"{tr('Set the order of the input menu.')}[Default=0]")
	
	parser.add_argument("-t", "--timeout", "--timeout="
					, nargs='?', action='store', type=int
					, help=f"{tr('Set timeout of the input menu.')}[Default=5]")
	
	parser.add_argument("-c", "--cmdline", "--cmdline="
					 , nargs='?', action='store'
					 , help=f"{tr('Boot command cmdline boot os entry linux.')}[Default=\"quiet splash\"]")

	parser.add_argument("--disable_recovery", "--no-recovery"
					 , "--disable-recovery"
					 , action='store_true'
					 , help=f"{tr('Disable Linux Recovery from startup.')}[Default=True]"
					 , required=False)

	parser.add_argument("--gfxmode", "--gfx="
					 , nargs='?', action='store'
					 , help=f"{tr('Set the input menu screen size.')} [Default=auto]")
	
	parser.add_argument("--theme", "--theme="
					  , nargs='?', action='store'
					  , help=f"{tr('Set theme name string.')}[Default=save]")

	parser.add_argument("--theme_dir", "--theme_dir="
					  , nargs='?', action='store'
					  , help=f"{tr('Set theme directory.')}[Default=save]")
			
if __name__ == "__main__":
	parser = argparse.ArgumentParser(description=f"{tr('Generate OSLG configuration file.')}")
	#check root
	check_root()
	#options
	options(parser)
	# argparse
	args = parser.parse_args()

	if args.output == None:
		raise Exception(f"{tr('File not selected, use -o {path}')}")
	
	if args.root == None:
		raise Exception(f"{tr('No boot directory selected, use -r or --root')}")
	
	if args.default != None:
		oslg_default = int(args.default)
	
	if args.timeout != None:
		oslg_default = int(args.timeout) 
	
	if args.cmdline != None:
		oslg_cmdline = args.cmdline
	
	if args.disable_recovery:
		print(f"{tr('Disable Linux Recovery from startup.')}")
		oslg_disable_linux_recovery = False

	if args.gfxmode != None:
		if not "x" in args.gfxmode:
			raise Exception(f"{tr('Invalid Sintax gfxmode')} [Example 670x340]")
		oslg_gfxmode = str(args.gfxmode)
	
	if args.theme != None:
		oslg_theme = args.theme
		
	CONF(args.output, oslg_default, oslg_gfxmode, args.root, oslg_theme, oslg_timeout , oslg_disable_linux_recovery , oslg_cmdline, args.theme_dir)
